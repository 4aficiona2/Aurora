<% project_name = File.basename(Compass.configuration.project_path) %><% project_js = Compass.configuration.javascripts_dir %><% project_css = Compass.configuration.css_dir %><?php

/**
 * Override or insert variables into the maintenance page template.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("maintenance_page" in this case.)
 */
function <%= project_name %>_preprocess_maintenance_page(&$vars, $hook) {
  // When a variable is manipulated or added in preprocess_html or
  // preprocess_page, that same work is probably needed for the maintenance page
  // as well, so we can just re-use those functions to do that work here.
  <%= project_name %>_preprocess_html($variables, $hook);
  <%= project_name %>_preprocess_page($variables, $hook);

  drupal_add_css(drupal_get_path('theme', '<%= project_name %>') . '/css/maintenance.css', array('group' => CSS_THEME, 'weight' => 1000));

  // This preprocessor will also be used if the db is inactive. To ensure your
  // theme is used, add the following line to your settings.php file:
  // $conf['maintenance_theme'] = '<%= project_name %>';
  // Also, check $vars['db_is_active'] before doing any db queries.
}

/**
 * Implements hook_preprocess_html()
 */
function <%= project_name %>_preprocess_html(&$vars) {
  // Be sure replace this with a custom Modernizr build!
  drupal_add_js(drupal_get_path('theme', '<%= project_name %>') . '/<%= project_js %>/modernizr-2.5.3.js', array('force header' => true));
  
  // yep/nope for conditional JS loading!
  drupal_add_js(drupal_get_path('theme', '<%= project_name %>') . '/<%= project_js %>/loader.js');
}

/**
 * Override or insert variables into the page template.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("page" in this case.)
 */
function <%= project_name %>_preprocess_page(&$vars) {
  // Leaving this on by default for the maintainance page preprocessor.
  //dpm($vars);
}

/**
 * Override or insert variables into the region templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("region" in this case.)
 */
/* -- Delete this line if you want to use this function
function <%= project_name %>_preprocess_region(&$vars, $hook) {
  //dpm($vars);
}
// */

/**
 * Override or insert variables into the block templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("block" in this case.)
 */
/* -- Delete this line if you want to use this function
function <%= project_name %>_preprocess_block(&$vars, $hook) {
  //dpm($vars);
}
// */

/**
 * Override or insert variables into the entity template.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("entity" in this case.)
 */
/* -- Delete this line if you want to use this function
function <%= project_name %>_preprocess_entity(&$vars, $hook) {
  //dpm($vars);
}
// */

/**
 * Override or insert variables into the node template.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("node" in this case.)
 */
/* -- Delete this line if you want to use this function
function <%= project_name %>_preprocess_node(&$vars, $hook) {
  $node = $vars['node'];
}
// */

/**
 * Override or insert variables into the field template.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("field" in this case.)
 */
/* -- Delete this line if you want to use this function
function <%= project_name %>_preprocess_field(&$vars, $hook) {
  //dpm($vars);
}
// */

/**
 * Override or insert variables into the comment template.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("comment" in this case.)
 */
/* -- Delete this line if you want to use this function
function <%= project_name %>_preprocess_comment(&$vars, $hook) {
  $comment = $vars['comment'];
  //dpm($vars);
}
// */

/**
 * Override or insert variables into the views template.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 */
/* -- Delete this line if you want to use this function
function <%= project_name %>_preprocess_views_view(&$vars) {
  //dpm($vars);
}
// */


/**
 * Override or insert css on the site.
 *
 * @param $css
 *   An array of all CSS items being requested on the page.
 */
function <%= project_name %>_css_alter(&$css) {
  // dpm($css);
  $path_to_theme = drupal_get_path('theme', '<%= project_name %>');
  // Unset unneeded css if site is in maintainance mode.
  if (isset($css[$path_to_theme . '/css/maintenance.css'])) {
    $new_css = array();
    $new_css[$path_to_theme . '/css/normalize.css'] = $css[$path_to_theme . '/css/normalize.css'];
    // Add in any other css you want to keep in as well.
    $new_css['modules/system/system.messages.css'] = $css['modules/system/system.messages.css'];

    // Have maintance.css be last so it can override anything.
    $new_css[$path_to_theme . '/css/maintenance.css'] = $css[$path_to_theme . '/css/maintenance.css'];
    // Set the $css var to the $new_css.
    $css = $new_css;
  }
}
// */

/**
 * Override or insert javascript on the site.
 *
 * @param $js
 *   An array of all JavaScript being presented on the page.
 */
function <%= project_name %>_js_alter(&$javascript) {
  // Replace old version of jQuery with new one from Google.
  $version = variable_get('<%= project_name %>_jquery_version', '1.7.2');
  $javascript['misc/jquery.js']['version'] = $version;
  $javascript['misc/jquery.js']['data'] = "//ajax.googleapis.com/ajax/libs/jquery/$version/jquery.min.js";
  $javascript['misc/jquery.js']['type'] = 'external';

  // Now add in code to fall back on our own if google fails us.
  // Make sure you change this to your own jQuery version if you dont want 1.7.2
  $path_to_theme = drupal_get_path('theme', '<%= project_name %>');
  $javascript['misc/jquery-fallback.js'] = array(
    'group' => JS_LIBRARY,
    'weight' => -19,
    'every_page' => TRUE,
    'type' => 'inline',
    'scope' => 'footer',
    'cache' => FALSE,
    'defer' => FALSE,
    'data' => 'window.jQuery || document.write(\'<script type="text/javascript" src="/' . $path_to_theme . '/jquery.min.js"><\/script>\')'
  );
}
